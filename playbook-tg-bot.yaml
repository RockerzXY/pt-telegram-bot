- name: Create postgres user
  hosts: all
  gather_facts: false
  become: yes
  tasks:
    - name: Install essential packages
      apt:
        pkg:
          - git
          - python3-pip
          - postgresql-contrib
          - postgresql-common
          - sysstat
          - libpq-dev
          - python3-psycopg2
        state: present
        update_cache: yes

    - name: Ensure postgres user exists
      user:
        name: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
        state: present
        system: yes
        password: "{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}"

    - name: Install psycopg2 via pip
      pip:
        name: psycopg2-binary
        state: present
        executable: pip3

    - name: Grant superuser privileges to postgres user
      become_user: postgres
      postgresql_user:
        name: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
        role_attr_flags: "SUPERUSER"

- name: install host1
  hosts: host1
  become: yes
  tasks:
    - name: Ensure PostgreSQL is running
      service:
        name: postgresql
        state: started

    - name: Install essential packages on host1
      apt:
        pkg:
          - git
          - python3-pip
          - postgresql-contrib
          - postgresql-common
          - sysstat
        state: present
        update_cache: yes

    - name: Clone git repository
      git:
        repo: "{{ hostvars[inventory_hostname]['GIT'] }}"
        dest: "/home/{{ hostvars[inventory_hostname]['RM_USER'] }}/ansible"
        version: bot

    - name: Install pip packages from requirements.txt
      pip:
        requirements: "/home/{{ hostvars[inventory_hostname]['RM_USER'] }}/ansible/requirements.txt"

    - name: Install paramiko without cache
      pip:
        name: paramiko
        state: present
        executable: pip3
        extra_args: --no-cache-dir

    - name: Create logs directory
      file:
        path: "/home/{{ hostvars[inventory_hostname]['RM_USER'] }}/../bot"
        state: directory

    - name: Change postgres password
      become_user: postgres
      command: psql -c "ALTER USER {{ hostvars[inventory_hostname]['DB_USER'] }} WITH PASSWORD '{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}';"

    - name: Configure postgresql.conf for master
      become_user: postgres
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/postgresql.conf"
        block: |
          listen_addresses = '*'
          port = {{ hostvars[inventory_hostname]['DB_PORT'] }}
          max_wal_senders=10
          wal_level=replica
          wal_log_hints = on
          hot_standby=on
          max_replication_slots=10
          hot_standby_feedback=on
          log_replication_commands=on
      register: postgresql_conf_changed

    - name: Configure pg_hba.conf for master
      become_user: postgres
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/pg_hba.conf"
        block: |
          local all postgres md5
          host replication all {{ hostvars['host2']['ansible_host'] }}/32 scram-sha-256
          host all all 0.0.0.0/0 md5
      register: pg_hba_conf_changed

    - name: Apply PostgreSQL configuration changes
      service:
        name: postgresql
        state: restarted
      when: postgresql_conf_changed is changed or pg_hba_conf_changed is changed

    - name: Check if PostgreSQL is running
      become_user: postgres
      shell: "pg_isready -q"
      register: postgresql_running
      changed_when: false
      failed_when: false

    - name: Drop existing database
      become_user: postgres
      postgresql_db:
        name: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        state: absent
      when: postgresql_running is success

    - name: Create database
      become_user: postgres
      postgresql_db:
        name: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        state: present
      when: postgresql_running is success

    - name: Create replication user if not exists
      become_user: postgres
      postgresql_user:
        name: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
        password: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
        role_attr_flags: "LOGIN"
        state: present
      when: postgresql_running is success

    - name: Ensure replication role
      become_user: postgres
      postgresql_user:
        name: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
        role_attr_flags: "REPLICATION"
      when: postgresql_running is success

    - name: Copy init.sql
      copy:
        src: /home/{{ hostvars[inventory_hostname]['HOST_USER'] }}/ansible/init.sql
        dest: /tmp/init.sql

    - name: Change rights of init.sql
      file:
        path: /tmp/init.sql
        owner: postgres
        group: postgres
        mode: '0644'

    - name: Set permissions on temporary directory
      file:
        path: /tmp
        mode: '1777'

    - name: Replace database name in init.sql
      replace:
        path: /tmp/init.sql
        regexp: "DB_DATABASE"
        replace: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"

    - name: Replace user name in init.sql
      replace:
        path: /tmp/init.sql
        regexp: "DB_USER"
        replace: "{{ hostvars[inventory_hostname]['DB_USER'] }}"

    - name: Replace replication user name in init.sql
      replace:
        path: /tmp/init.sql
        regexp: "DB_REPL_USER"
        replace: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"

    - name: Replace replication password in init.sql
      replace:
        path: /tmp/init.sql
        regexp: "DB_REPL_PASSWORD"
        replace: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"

    - name: Run init.sql as postgres
      shell: "psql -a -f /tmp/init.sql"
      become_user: postgres
      register: psql_output
      ignore_errors: true

    - name: Ensure log file is readable
      file:
        path: /var/log/postgresql/postgresql-{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}-main.log
        mode: '0644'

- name: install host2
  hosts: host2
  become: yes
  tasks:
    - name: Install essential packages on host2
      apt:
        pkg:
          - git
          - python3-pip
          - postgresql-contrib
          - postgresql-common
          - sysstat
        state: present
        update_cache: yes

    - name: Configure postgresql.conf for replica
      become_user: postgres
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/postgresql.conf"
        block: |
          listen_addresses = '*'
          port = {{ hostvars[inventory_hostname]['DB_REPL_PORT'] }}

    - name: Apply changes
      service:
        name: postgresql
        state: restarted


    - name: Check if PostgreSQL is running
      become_user: postgres
      shell: "pg_isready -q"
      register: postgresql_running
      changed_when: false
      failed_when: false

    - name: create database if not exists
      become_user: postgres
      postgresql_db:
        name: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        state: present
      when: postgresql_running is success

    - name: Create replication user if not exists
      become_user: postgres
      postgresql_user:
        name: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
        password: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
        role_attr_flags: "LOGIN"
        state: present
      when: postgresql_running is success

    - name: Ensure replication role
      become_user: postgres
      postgresql_user:
        name: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
        role_attr_flags: "REPLICATION"
      when: postgresql_running is success

    - name: copying init.sql
      copy:
        src: /home/{{ hostvars[inventory_hostname]['HOST_USER'] }}/ansible/init.sql
        dest: /tmp/init.sql

    - name: change rights
      file:
        path: /tmp/init.sql
        owner: postgres
        group: postgres
        mode: '0644'

    - name: set permissions on temporary directory
      file:
        path: /tmp
        mode: '1777'

    - name: db init
      replace:
        path: /tmp/init.sql
        regexp: "DB_DATABASE"
        replace: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"

    - name: user init
      replace:
        path: /tmp/init.sql
        regexp: "DB_USER"
        replace: "{{ hostvars[inventory_hostname]['DB_USER'] }}"

    - name: repl user init
      replace:
        path: /tmp/init.sql
        regexp: "DB_REPL_USER"
        replace: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"

    - name: repl pass init
      replace:
        path: /tmp/init.sql
        regexp: "DB_REPL_PASSWORD"
        replace: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"

    - name: run init.sql as postgres
      shell: "psql -a -f /tmp/init.sql"
      become: yes
      become_user: postgres
      register: psql_output
      ignore_errors: true


    - name: Ensure log file is readable
      file:
        path: /var/log/postgresql/postgresql-{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}-main.log
        mode: '0644'


- name: install host2
  hosts: host2
  become: true
  tasks:

    - name: install pkgs
      apt:
       pkg:
        - git
        - python3-pip
        - postgresql-contrib
        - postgresql-common
        - sysstat
    - name: postgresql.conf replica conf
      become_user: postgres
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/postgresql.conf"
        block: |
          listen_addresses = '*'
          port = {{ hostvars[inventory_hostname]['DB_REPL_PORT'] }}

    - name: apply replica changes
      service:
        name: postgresql
        state: restarted

    - name: Install paramiko without cache
      pip:
        name: paramiko
        state: present
        executable: pip3
        extra_args: --no-cache-dir

    - name: stop PostgreSQL
      service:
        name: postgresql
        state: stopped

    - name: delete dbs
      command: rm -rf /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/*
      become: true

    - name: ensure directory is clean
      command: find /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/ -mindepth 1 -delete
      become: true

    - name: performing replication
      shell: pg_basebackup -h {{ hostvars[inventory_hostname]['DB_HOST'] }} -D /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/ -p {{ hostvars[inventory_hostname]['DB_PORT'] }} -U {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} -Fp -Xs -P -R
      environment:
        PGUSER: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
        PGPASSWORD: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
      become: true

    - name: set permissions for the replication directory
      file:
        path: /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/
        owner: postgres
        group: postgres
        recurse: yes
      become: true

    - name: rights
      command: chown -R postgres:postgres /var/lib/postgresql/
      become: true

    - name: start PostgreSQL
      service:
        name: postgresql
        state: started

    - name: Ensure log file is readable
      file:
        path: /var/log/postgresql/postgresql-{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}-main.log
        mode: '0644'


- name: CONFIGURATING BOT
  hosts: host1
  become: yes
  tasks:
    - name: start bot
      command: python3 "/home/{{ hostvars[inventory_hostname]['RM_USER'] }}/ansible/main.py"
      environment:
        TOKEN: "{{ hostvars[inventory_hostname]['TOKEN'] }}"
        RM_HOST: "{{ hostvars[inventory_hostname]['RM_HOST'] }}"
        RM_PORT: "{{ hostvars[inventory_hostname]['RM_PORT'] }}"
        RM_USER: "{{ hostvars[inventory_hostname]['RM_USER'] }}"
        RM_PASSWORD: "{{ hostvars[inventory_hostname]['RM_PASSWORD'] }}"
        DB_HOST: "{{ hostvars[inventory_hostname]['DB_HOST'] }}"
        DB_PORT: "{{ hostvars[inventory_hostname]['DB_PORT'] }}"
        DB_USER: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
        DB_PASSWORD: "{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}"
        DB_DATABASE: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"